# -*- coding: utf-8 -*-
"""Copy of Toxic Comment Classification Challenge: Starter Colab Notebook

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXkzYn02au6r2P5XO3g2oYRZOwoh3UOl

# Toxic Comment Classification Challenge: Starter Colab Notebook

leduykhanh@

Short Link: **tiny.cc/mlcc-toxic-starter-colab**

Kaggle challenge: https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge

>[Toxic Comment Classification Challenge: Starter Colab Notebook](#scrollTo=SXgAs6uoQ_Zv)

>>[Import the dataset](#scrollTo=pdQHcSnWdM4b)

>>[Input and Label](#scrollTo=rkGUNgjocwKi)

>>[Train/Validation Split](#scrollTo=qaUp1VaFek9e)

>>[Train a model](#scrollTo=7C1075_ce57W)

>>[References](#scrollTo=7C1075_ce57W)

## Import the dataset
"""

# Original data belongs to https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data
! wget https://www.dropbox.com/s/u2cqp8n5uk4hjol/train.csv
! wget https://www.dropbox.com/s/1b9hfrfey782vq5/test.csv
! wget https://www.dropbox.com/s/0bgygcpexh2wj3a/test_labels.csv
! wget https://www.dropbox.com/s/70g8k58gcxfbjv3/sample_submission.csv

! ls -ls

import pandas as pd
train = pd.read_csv("train.csv")
labels = pd.read_csv("test_labels.csv")
test = pd.read_csv("test.csv")
subm = pd.read_csv("sample_submission.csv")

train.head(10)

"""## Input and Label

Input: "comment_text"

Label: "toxic"
"""

dataset = train[ ["comment_text", "toxic"] ]

"""## Train/Validation Split"""

# Train / validation split
dataset = dataset.sample(frac=1)
train_dataset = dataset.head(int(0.8 * len(dataset)))
validation_dataset = dataset.tail(int(0.2 * len(dataset)))

print(len(dataset))
print(len(train_dataset))
print(len(validation_dataset))

train_dataset.describe()

validation_dataset.describe()

train_dataset.head(10)

validation_dataset.head(50)



"""## Train a model

Your model's code start here. All the best :)



## References

* Text classification using tf.keras https://www.tensorflow.org/tutorials/keras/basic_text_classification

* How to build a simple text classifier with TF-Hub https://www.tensorflow.org/tutorials/text_classification_with_tf_hub

* Tensorflow Estimator API: https://www.tensorflow.org/tutorials/recurrent

* Using pre-trained word embeddings in a Keras model https://blog.keras.io/using-pre-trained-word-embeddings-in-a-keras-model.html

* Text Classification with TensorFlow Estimators http://ruder.io/text-classification-tensorflow-estimators/

* Scikit-Learns NLP documentation: http://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html

* [Review on  Kaggle Toxic Comment Classification Challenge](https://medium.com/the-artificial-impostor/review-kaggle-toxic-comment-classification-challenge-part-1-934447339309)
"""

import pandas as pd, numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer

train['comment_text'][0]

lens = train.comment_text.str.len()
lens.mean(), lens.std(), lens.max()

lens.hist();

label_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']
train['none'] = 1-train[label_cols].max(axis=1)
train.describe()

len(train),len(test)

COMMENT = 'comment_text'
train[COMMENT].fillna("unknown", inplace=True)
test[COMMENT].fillna("unknown", inplace=True)

import re, string
re_tok = re.compile(f'([{string.punctuation}“”¨«»®´·º½¾¿¡§£₤‘’])')
def tokenize(s): return re_tok.sub(r' \1 ', s).split()

n = train.shape[0]
vec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,
               min_df=3, max_df=0.9, strip_accents='unicode', use_idf=1,
               smooth_idf=1, sublinear_tf=1 )
trn_term_doc = vec.fit_transform(train[COMMENT])
test_term_doc = vec.transform(test[COMMENT])

trn_trm_do, test_term_doc

#Here's the basic naive bayes feature equation:
def pr(y_i, y):
    p = x[y==y_i].sum(0)
    return (p+1) / ((y==y_i).sum()+1)
  
x = trn_term_doc
test_x = test_term_doc

#Fit a model for one dependent at a time:
def get_mdl(y):
    y = y.values
    r = np.log(pr(1,y) / pr(0,y))
    m = LogisticRegression(C=4, dual=True)
    x_nb = x.multiply(r)
    return m.fit(x_nb, y), r
  
preds = np.zeros((len(test), len(label_cols)))

for i, j in enumerate(label_cols):
    print('fit', j)
    m,r = get_mdl(train[j])
    preds[:,i] = m.predict_proba(test_x.multiply(r))[:,1]

submid = pd.DataFrame({'id': subm["id"]})
submission = pd.concat([submid, pd.DataFrame(preds, columns = label_cols)], axis=1)
submission.to_csv('submission.csv', index=False)

subm = pd.read_csv("submission.csv")
subm.head()

"""# New Section"""